name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Run linter (if exists)
        working-directory: ./backend
        run: npm run lint --if-present
        continue-on-error: true
      
      - name: Run tests (if exists)
        working-directory: ./backend
        run: npm test --if-present
        continue-on-error: true

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run linter (if exists)
        working-directory: ./frontend
        run: npm run lint --if-present
        continue-on-error: true
      
      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
        env:
          CI: true
      
      - name: Run tests (if exists)
        working-directory: ./frontend
        run: npm test --if-present -- --passWithNoTests
        continue-on-error: true

  build-and-push-docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
      
      - name: Build and push Backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/wordapp-backend:${{ env.BRANCH_NAME }}
            ${{ secrets.DOCKER_USERNAME }}/wordapp-backend:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/wordapp-backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/wordapp-backend:buildcache,mode=max
      
      - name: Build and push Frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          target: production
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/wordapp-frontend:${{ env.BRANCH_NAME }}
            ${{ secrets.DOCKER_USERNAME }}/wordapp-frontend:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/wordapp-frontend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/wordapp-frontend:buildcache,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build-and-push-docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Run Trivy vulnerability scanner - Backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/wordapp-backend:latest
          format: 'sarif'
          output: 'trivy-backend-results.sarif'
        continue-on-error: true
      
      - name: Run Trivy vulnerability scanner - Frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/wordapp-frontend:latest
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
        continue-on-error: true
